{"version":3,"sources":["components/iss.png","components/earth.png","components/Header.js","components/Tracker.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","react","className","src","iss","alt","active","style","color","Tracker","timestamp","data","_props$data$iss_posit","iss_position","latitude","longitude","type","id","onClick","click","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","concat","getDate","velocity","distance","Footer","earth","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getData","fetch","then","response","ok","Error","status","json","state","first_data","setState","current_data","catch","error","console","log","getVelocity","getDistance","handleClick","prevState","s","time","toFixed","_this$state","pi","Math","PI","lon1","lon2","lat1","lat2","dlon","dlat","pow","sin","cos","asin","sqrt","message","Infinity","idInterval","_this2","setInterval","clearInterval","src_components_Header","src_components_Tracker","src_components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sTCoBzBC,EAhBA,SAAAC,GAEb,OACEC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,IAAKC,IAAI,SAErBP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,SACXL,EAAMS,OAAQR,EAAAC,EAAAC,cAAA,QAAMO,MAAQ,CAACC,MAAO,YAR/B,uCCUhB,IA8BeC,EA9BC,SAAAZ,GAAS,IAChBa,EAAab,EAAMc,KAAnBD,UADgBE,EAEOf,EAAMc,KAAKE,aAAlCC,EAFgBF,EAEhBE,SAAUC,EAFMH,EAENG,UAGjB,OACEjB,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,WAAWC,GAAG,QAAQC,QAASrB,EAAMsB,SAGnDrB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACZL,EAAMS,QACLR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,kBAASF,EAAAC,EAAAC,cAAA,QAAME,UAAU,WA1BrC,SAAiBQ,GACf,IAAMU,EAAO,IAAIC,KAAe,IAAVX,GAChBY,EAAQF,EAAKG,WACbC,EAAUJ,EAAKK,aACfC,EAAUN,EAAKO,aACrB,SAAAC,OACKN,EAAQ,GAAI,IAAMA,EAAQA,EAD/B,YAAAM,OAEMJ,EAAU,GAAI,IAAMA,EAAUA,EAFpC,YAAAI,OAGMF,EAAU,GAAI,IAAMA,EAAUA,GAkBUG,CAAQnB,KAC5CZ,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,QAAME,UAAU,WAAWY,EAA3B,IAZR,SAaLhB,EAAAC,EAAAC,cAAA,wBAAeF,EAAAC,EAAAC,cAAA,QAAME,UAAU,WAAWa,EAA3B,IAbV,SAcLjB,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,QAAME,UAAU,WAC1BL,EAAMiC,SAAW,EAAGjC,EAAMiC,SAAW,QAAU,eAElDhC,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,QAAME,UAAU,WAC5BL,EAAMkC,SAAW,EAAGlC,EAAMkC,SAAW,MAAQ,2CCxB3CC,EARA,WACb,OACElC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,OAAKG,IAAK8B,IAAO5B,IAAI,WC6HZ6B,cA1Hb,SAAAA,EAAYrC,GAAO,IAAAsC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMzC,KA6BR6C,QAAU,WAERC,MADY,2CAETC,KAAK,SAAAC,GACJ,GAAGA,EAASC,GACV,OAAOD,EAET,MAAME,MAAMF,EAASG,UAEtBJ,KAAK,SAAAC,GAAQ,OAAIA,EAASI,SAC1BL,KAAK,SAAAjC,GAEAA,EAAKD,UAAYyB,EAAKe,MAAMC,WAAWzC,WACzCyB,EAAKiB,SAAS,CACZD,WAAYxC,IAGhBwB,EAAKiB,SAAS,CACZC,aAAc1C,MAGjB2C,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,KAE9BpB,EAAKuB,cACLvB,EAAKwB,eAtDYxB,EAyDnByB,YAAc,WACZzB,EAAKiB,SAAS,SAAAS,GAAS,MAAK,CAC1BvD,QAASuD,EAAUvD,WA3DJ6B,EA+DnBuB,YAAc,WAEZ,IAAMI,EAAI3B,EAAKe,MAAMa,KAEfjC,GADIK,EAAKe,MAAMnB,SACD+B,GAAGE,QAAQ,GAE/B7B,EAAKiB,SAAS,CACZtB,cAtEeK,EA0EnBwB,YAAc,WAAM,IAAAM,EACiB9B,EAAKe,MAAjCG,EADWY,EACXZ,aAAcF,EADHc,EACGd,WAEfe,EAAKC,KAAKC,GAEVC,EAAOlB,EAAWtC,aAAaE,WAAamD,EAAG,KAC/CI,EAAOjB,EAAaxC,aAAaE,WAAamD,EAAG,KACjDK,EAAOpB,EAAWtC,aAAaC,UAAYoD,EAAG,KAC9CM,EAAOnB,EAAaxC,aAAaC,UAAYoD,EAAG,KAChDO,EAAOH,EAAOD,EACdK,EAAOF,EAAOD,EAChBxC,EAAWoC,KAAKQ,IAAIR,KAAKS,IAAIF,EAAK,GAAI,GAAKP,KAAKU,IAAIN,GACxCJ,KAAKU,IAAIL,GAAQL,KAAKQ,IAAIR,KAAKS,IAAIH,EAAK,GAAI,GAE5D1C,GAVU,MASVA,EAAW,EAAIoC,KAAKW,KAAKX,KAAKY,KAAKhD,MACTiC,QAAQ,GAElC7B,EAAKiB,SAAS,SAAAS,GAAS,MAAK,CAC1B9B,WACAgC,KAAMF,EAAUE,KAAO,MA1FzB5B,EAAKe,MAAQ,CACXpB,SAAU,EACVC,SAAU,EACVgC,MAAO,EAEPZ,WAAY,CACV6B,QAAS,GACTtE,UAAWuE,IACXpE,aAAc,CACZC,SAAU,GACVC,UAAW,KAIfsC,aAAc,CACZ2B,QAAS,GACTtE,UAAW,EACXG,aAAc,CACZC,SAAU,GACVC,UAAW,KAIfT,QAAQ,GAEV6B,EAAK+C,WAAa,GA3BD/C,mFAgGC,IAAAgD,EAAA7C,KAClBA,KAAKI,UACLJ,KAAK4C,WAAaE,YAAY,kBAAMD,EAAKzC,WAAW,oDAIpD2C,cAAc/C,KAAK4C,6CAInB,OACEpF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACsF,EAAD,CAAQhF,OAAQgC,KAAKY,MAAM5C,SAC3BR,EAAAC,EAAAC,cAACuF,EAAD,CACEjF,OAAQgC,KAAKY,MAAM5C,OACnBK,KAAM2B,KAAKY,MAAMG,aACjBlC,MAAOmB,KAAKsB,YACZ9B,SAAUQ,KAAKY,MAAMpB,SACrBC,SAAUO,KAAKY,MAAMnB,WAEvBjC,EAAAC,EAAAC,cAACwF,EAAD,cArHUC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlG,EAAAC,EAAAC,cAACiG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1D,KAAK,SAAA2D,GACjCA,EAAaC","file":"static/js/main.e224a382.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iss.b041a675.png\";","module.exports = __webpack_public_path__ + \"static/media/earth.5405546f.png\";","import React, {Fragment} from 'react';\r\nimport './Header.scss';\r\nimport iss from './iss.png';\r\n\r\nconst Header = props => {\r\n  const title = \"ISS TRACKER\";\r\n  return (\r\n    <Fragment>\r\n      <div className=\"iss\">\r\n        <img src={iss} alt=\"iss\"/>\r\n      </div>\r\n      <div className=\"header\">\r\n        <h1 className=\"title\">\r\n          {props.active? <span style={ {color: \"#22df4f\"} }>{title}</span> : title}\r\n        </h1>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n \r\nexport default Header;","import React, { Fragment } from 'react';\r\nimport './Tracker.scss';\r\n\r\nfunction getDate(timestamp) {\r\n  const date = new Date(timestamp*1000);\r\n  const hours = date.getHours();\r\n  const minutes = date.getMinutes();\r\n  const seconds = date.getSeconds();\r\n  return (\r\n    `${hours < 10? \"0\" + hours : hours}\r\n    : ${minutes < 10? \"0\" + minutes : minutes}\r\n    : ${seconds < 10? \"0\" + seconds : seconds}`\r\n  );\r\n}\r\n\r\nconst Tracker = props => {\r\n  const {timestamp} = props.data;\r\n  const {latitude, longitude} = props.data.iss_position;\r\n  const degree = '°';\r\n  \r\n  return (  \r\n    <Fragment>\r\n      <div className=\"checkbox\">\r\n        <input type=\"checkbox\" id=\"check\" onClick={props.click}/>\r\n      </div>\r\n\r\n      <div className=\"tracker\">\r\n        {props.active &&\r\n          <div className=\"data\">\r\n            <p>Time: <span className=\"numbers\">{getDate(timestamp)}</span></p>\r\n            <p>Latitude: <span className=\"numbers\">{latitude} {degree}</span></p>\r\n            <p>Longtitude: <span className=\"numbers\">{longitude} {degree}</span></p>\r\n            <p>Velocity: <span className=\"numbers\">\r\n              {props.velocity > 0? props.velocity + \" km/s\" : \"Loading...\"}\r\n            </span></p>\r\n            <p>Distance: <span className=\"numbers\">\r\n            {props.distance > 0? props.distance + \" km\" : \"Loading...\"}\r\n            </span></p>\r\n          </div>\r\n        }\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n \r\nexport default Tracker;","import React from 'react';\r\nimport './Footer.scss';\r\nimport earth from './earth.png';\r\n\r\nconst Footer = () => {\r\n  return (  \r\n    <div className=\"footer\">\r\n      <img src={earth} alt=\"logo\"/>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default Footer;","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport Header from './Header.js';\r\nimport Tracker from './Tracker.js';\r\nimport Footer from './Footer.js';\r\n\r\n//Treść zadania pozwala zoptymalizować aplikację\r\n//i przechowywać tylko niezbędne 2 odczyty\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      velocity: 0,\r\n      distance: 0, \r\n      time: -2, //w sekundach\r\n      \r\n      first_data: {\r\n        message: \"\",\r\n        timestamp: Infinity,\r\n        iss_position: {\r\n          latitude: \"\",\r\n          longitude: \"\",\r\n        }\r\n      },\r\n\r\n      current_data: { \r\n        message: \"\",\r\n        timestamp: 0,\r\n        iss_position: {\r\n          latitude: \"\",\r\n          longitude: \"\",\r\n        }\r\n      },\r\n\r\n      active: false,\r\n    }\r\n    this.idInterval = \"\";\r\n  }\r\n\r\n  getData = () => {\r\n    const url = \"http://api.open-notify.org/iss-now.json\";\r\n    fetch(url)\r\n      .then(response => {\r\n        if(response.ok) {\r\n          return response;\r\n        }\r\n        throw Error(response.status);\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        //tylko raz aktualizujemy stan obiektu first_data    \r\n        if (data.timestamp < this.state.first_data.timestamp) {\r\n          this.setState({ \r\n            first_data: data  \r\n          });\r\n        }\r\n        this.setState({ \r\n          current_data: data,\r\n        });\r\n      })\r\n      .catch(error => console.log(error))\r\n\r\n    this.getVelocity();\r\n    this.getDistance();\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState(prevState => ({ \r\n      active: !prevState.active\r\n    }));\r\n  }\r\n\r\n  getVelocity = () => {\r\n    //na podstawie 2 odczytów - pierwszy oraz aktualny\r\n    const s = this.state.time;\r\n    const t = this.state.distance;\r\n    const velocity = (t/s).toFixed(2);\r\n\r\n    this.setState({ \r\n      velocity\r\n    });\r\n  }\r\n\r\n  getDistance = () => {\r\n    const {current_data, first_data} = this.state;\r\n\r\n    const pi = Math.PI;\r\n    const r = 6371 + 408; //promień ziemii + wysokość ISS\r\n    const lon1 = first_data.iss_position.longitude * (pi/180);\r\n    const lon2 = current_data.iss_position.longitude * (pi/180);\r\n    const lat1 = first_data.iss_position.latitude * (pi/180);\r\n    const lat2 = current_data.iss_position.latitude * (pi/180);\r\n    const dlon = lon2 - lon1;\r\n    const dlat = lat2 - lat1;\r\n    let distance = Math.pow(Math.sin(dlat/2), 2) + Math.cos(lat1) * \r\n                    Math.cos(lat2) * Math.pow(Math.sin(dlon/2), 2);\r\n    distance = 2 * Math.asin(Math.sqrt(distance));\r\n    distance = (distance * r).toFixed(2);\r\n\r\n    this.setState(prevState => ({ \r\n      distance,\r\n      time: prevState.time + 1\r\n    }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n    this.idInterval = setInterval(() => this.getData(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.idInterval);\r\n  }\r\n\r\n  render() { \r\n    return (  \r\n      <div className=\"App\">\r\n        <Header active={this.state.active}/>\r\n        <Tracker\r\n          active={this.state.active}\r\n          data={this.state.current_data}\r\n          click={this.handleClick}\r\n          velocity={this.state.velocity}\r\n          distance={this.state.distance}\r\n        />\r\n        <Footer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}